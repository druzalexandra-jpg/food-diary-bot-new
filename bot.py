import os
import re
import json
import gspread
from google.oauth2 import service_account
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.environ['BOT_TOKEN']
CREDENTIALS_JSON = os.environ['GOOGLE_CREDENTIALS_JSON']
SHEET_URL = os.environ['GOOGLE_SHEET_URL']

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets ===
def get_worksheet():
    creds_dict = json.loads(CREDENTIALS_JSON)
    creds = service_account.Credentials.from_service_account_info(
        creds_dict,
        scopes=['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    )
    client = gspread.authorize(creds)
    sheet = client.open_by_url(SHEET_URL).sheet1
    return sheet

# === –ü–æ–∏—Å–∫ –ö–ë–ñ–£ –≤ Open Food Facts ===
def get_nutrition(product_name):
    url = "https://world.openfoodfacts.org/cgi/search.pl"
    params = {
        'search_terms': product_name,
        'search_simple': 1,
        'json': 1,
        'page_size': 1
    }
    try:
        res = requests.get(url, params=params, timeout=5)
        data = res.json()
        if data['products']:
            p = data['products'][0]
            nutriments = p.get('nutriments', {})
            return {
                'kcal': round(nutriments.get('energy-kcal', 0)),
                'proteins': round(nutriments.get('proteins', 0), 1),
                'fats': round(nutriments.get('fat', 0), 1),
                'carbs': round(nutriments.get('carbohydrates', 0), 1)
            }
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:", e)
    return {'kcal': 0, 'proteins': 0, 'fats': 0, 'carbs': 0}

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    
    # –ü–∞—Ä—Å–∏–Ω–≥: "–æ–≤—Å—è–Ω–∫–∞ 40–≥" –∏–ª–∏ "—è–π—Ü–æ 2 —à—Ç"
    match = re.search(r'([–∞-—èa-z\s\-]+?)\s*(\d+)\s*(–≥|—à—Ç|ml|–º–ª)', text)
    if not match:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *–ø—Ä–æ–¥—É–∫—Ç –≤–µ—Å–≥* (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–≤—Å—è–Ω–∫–∞ 40–≥)", parse_mode="Markdown")
        return

    product = match.group(1).strip()
    amount = int(match.group(2))
    unit = match.group(3)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É
    nutr = get_nutrition(product)

    # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
    try:
        sheet = get_worksheet()
        from datetime import datetime
        now = datetime.now()
        row = [
            now.strftime("%Y-%m-%d"),
            now.strftime("%H:%M"),
            product,
            amount,
            nutr['kcal'],
            nutr['proteins'],
            nutr['fats'],
            nutr['carbs']
        ]
        sheet.append_row(row)
        await update.message.reply_text(
            f"‚úÖ –ó–∞–ø–∏—Å–∞–ª: *{product} {amount}{unit}*\n"
            f"–ö–ë–ñ–£: {nutr['kcal']} –∫–∫–∞–ª | –ë: {nutr['proteins']}–≥ | –ñ: {nutr['fats']}–≥ | –£: {nutr['carbs']}–≥",
            parse_mode="Markdown"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {str(e)}")

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è üçΩÔ∏è\n"
        "–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏, —á—Ç–æ –µ—à—å: *–æ–≤—Å—è–Ω–∫–∞ 40–≥*, *–∫—É—Ä–∏—Ü–∞ 150–≥*, *—è–±–ª–æ–∫–æ 1 —à—Ç*\n"
        "–í –∫–æ–Ω—Ü–µ –¥–Ω—è –Ω–∞–ø–∏—à–∏ /–∏—Ç–æ–≥ ‚Äî –ø–æ–¥–≤–µ–¥—É –±–∞–ª–∞–Ω—Å!",
        parse_mode="Markdown"
    )

# === –ö–æ–º–∞–Ω–¥–∞ /summary ===
async def summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìä –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ –∑–∞ –¥–µ–Ω—å! –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞—é –≤—Å—ë –≤ —Ç–∞–±–ª–∏—Ü—É.")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == '__main__':
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("summary", summary))  # ‚Üê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
